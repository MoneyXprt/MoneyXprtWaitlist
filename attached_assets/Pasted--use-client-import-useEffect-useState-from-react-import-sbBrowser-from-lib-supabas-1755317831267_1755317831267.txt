'use client';

import { useEffect, useState } from 'react';
import { sbBrowser } from '@/lib/supabase';

export default function AuthWidget() {
  const supabase = sbBrowser();
  const [email, setEmail] = useState('');
  const [sessionEmail, setSessionEmail] = useState<string | null>(null);
  const [msg, setMsg] = useState('');

  useEffect(() => {
    const getSession = async () => {
      const { data } = await supabase.auth.getUser();
      setSessionEmail(data.user?.email ?? null);
    };
    getSession();
    const { data: sub } = supabase.auth.onAuthStateChange((evt) => {
      if (evt === 'SIGNED_IN') window.location.assign('/app');
      getSession();
    });
    return () => { sub.subscription.unsubscribe(); };
  }, []);

  async function emailRedirect() {
    return `${window.location.origin}/`; // or '/app'
  }

  const handleEmail = async () => {
    setMsg('');
    const redirectTo = await emailRedirect();

    // 1) Try signUp (will create the user + send confirmation/magic link)
    const { error: signUpErr } = await supabase.auth.signUp({
      email,
      options: { emailRedirectTo: redirectTo }
    });

    if (!signUpErr) {
      setMsg('Check your email for the login link.');
      return;
    }

    // If signups are disabled, try signInWithOtp (for existing users)
    if (signUpErr?.message?.toLowerCase().includes('signups not allowed') ||
        signUpErr?.message?.toLowerCase().includes('signup disabled') ||
        signUpErr?.status === 400) {
      const { error: otpErr } = await supabase.auth.signInWithOtp({
        email,
        options: { emailRedirectTo: redirectTo }
      });
      if (!otpErr) {
        setMsg('We sent you a magic login link.');
        return;
      }
      setMsg(`Sign-in error: ${otpErr.message}`);
      return;
    }

    // Otherwise surface the real error
    setMsg(`Sign-up error: ${signUpErr.message}`);
  };

  const signOut = async () => {
    await supabase.auth.signOut();
    setSessionEmail(null);
  };

  return (
    <div className="flex items-center gap-3">
      {sessionEmail ? (
        <>
          <span className="text-sm text-neutral-700">Signed in: {sessionEmail}</span>
          <a href="/app" className="text-sm underline">Open Beta</a>
          <button onClick={signOut} className="rounded-lg px-3 py-1 bg-neutral-200">Sign out</button>
        </>
      ) : (
        <>
          <input
            className="border rounded px-2 py-1"
            placeholder="you@work.com"
            value={email}
            onChange={e => setEmail(e.target.value)}
          />
          <button onClick={handleEmail} className="rounded-lg px-3 py-1 bg-black text-white">
            Email me a link
          </button>
          {msg && <span className="text-sm text-red-600">{msg}</span>}
        </>
      )}
    </div>
  );
}
