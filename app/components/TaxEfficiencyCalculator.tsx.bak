'use client';

import { useState } from 'react';
import { 
  calculateFederalTax, 
  calculateCATax, 
  calculateEstateTax,
  TAX_CONSTANTS 
} from './tax/TaxBrackets';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

interface FormInputs {
  annualIncome: number;
  deductibleExpenses: number;
  assetTypes: ('real_estate' | 'stocks' | 'business')[];
  currentEntity: 'none' | 'llc' | 'trust' | 'flp';
  plannedGifts: number;
  investmentStrategy: 'long_term' | 'qsbs' | 'other';
  borrowingAmount: number;
  numHeirs: number;
  borrowingRate: number;
  estateValue: number;
}

interface TaxScenario {
  name: string;
  federalTax: number;
  stateTax: number;
  estateTax: number;
  totalTax: number;
  savings: number;
  strategies: string[];
}
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';

interface FormInputs {
  annualIncome: number;
  deductibleExpenses: number;
  assetTypes: ('real_estate' | 'stocks' | 'business')[];
  currentEntity: 'none' | 'llc' | 'trust' | 'flp';
  plannedGifts: number;
  investmentStrategy: 'long_term' | 'qsbs' | 'other';
  borrowingAmount: number;
  numHeirs: number;
  borrowingRate: number;
  estateValue: number;
}

interface TaxScenario {
  name: string;
  federalTax: number;
  stateTax: number;
  estateTax: number;
  totalTax: number;
  savings: number;
  strategies: string[];
}

export default function TaxEfficiencyCalculator() {
  const [activeSection, setActiveSection] = useState<string>('income');
  const [formInputs, setFormInputs] = useState<FormInputs>({
    annualIncome: 500000,
    deductibleExpenses: 50000,
    assetTypes: [],
    currentEntity: 'none',
    plannedGifts: 0,
    investmentStrategy: 'long_term',
    borrowingAmount: 0,
    numHeirs: 2,
    borrowingRate: 5,
    estateValue: 0
  });

  const [scenarios, setScenarios] = useState<TaxScenario[]>([]);

  const handleInputChange = (field: keyof FormInputs, value: any) => {
    setFormInputs(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAssetTypeToggle = (type: 'real_estate' | 'stocks' | 'business') => {
    setFormInputs(prev => ({
      ...prev,
      assetTypes: prev.assetTypes.includes(type)
        ? prev.assetTypes.filter(t => t !== type)
        : [...prev.assetTypes, type]
    }));
  };

  const calculateScenarios = () => {
    // Base taxable income calculation
    const baseTaxableIncome = formInputs.annualIncome - TAX_CONSTANTS.FEDERAL_STD_DEDUCTION;
    const baseStateTaxableIncome = formInputs.annualIncome - TAX_CONSTANTS.CA_STD_DEDUCTION;

    // Baseline scenario (no structure)
    const baselineFederalTax = calculateFederalTax(baseTaxableIncome);
    const baselineStateTax = calculateCATax(baseStateTaxableIncome);
    const baselineEstateTax = calculateEstateTax(formInputs.estateValue);
    const baselineTotalTax = baselineFederalTax + baselineStateTax + baselineEstateTax;

    const baseline: TaxScenario = {
      name: 'Baseline (No Structure)',
      federalTax: baselineFederalTax,
      stateTax: baselineStateTax,
      estateTax: baselineEstateTax,
      totalTax: baselineTotalTax,
      savings: 0,
      strategies: ['Standard deductions only', 'No entity optimization']
    };

    // LLC Scenario
    const llcTaxableIncome = baseTaxableIncome - formInputs.deductibleExpenses;
    const llcStateTaxableIncome = baseStateTaxableIncome - formInputs.deductibleExpenses;
    const llcFederalTax = calculateFederalTax(llcTaxableIncome);
    const llcStateTax = calculateCATax(llcStateTaxableIncome);
    const llcEstateTax = baselineEstateTax; // Same as baseline
    const llcTotalTax = llcFederalTax + llcStateTax + llcEstateTax;

    const llc: TaxScenario = {
      name: 'LLC Structure',
      federalTax: llcFederalTax,
      stateTax: llcStateTax,
      estateTax: llcEstateTax,
      totalTax: llcTotalTax,
      savings: baselineTotalTax - llcTotalTax,
      strategies: ['Business expense deductions', 'Pass-through taxation', 'Asset protection']
    };

    // FLP/Trust Scenario
    const flpFederalTax = llcFederalTax; // Same as LLC for income
    const flpStateTax = llcStateTax;
    const flpEstateTax = calculateEstateTax(formInputs.estateValue, true); // Apply 30% discount
    const flpTotalTax = flpFederalTax + flpStateTax + flpEstateTax;

    const flp: TaxScenario = {
      name: 'FLP/Trust Structure',
      federalTax: flpFederalTax,
      stateTax: flpStateTax,
      estateTax: flpEstateTax,
      totalTax: flpTotalTax,
      savings: baselineTotalTax - flpTotalTax,
      strategies: ['30% valuation discount', 'Enhanced asset protection', 'Succession planning']
    };

    // Buy-Borrow-Die Scenario
    const borrowingCost = formInputs.borrowingAmount * (formInputs.borrowingRate / 100);
    const deferredGains = formInputs.borrowingAmount * TAX_CONSTANTS.CAPITAL_GAINS_RATE;
    
    const bbdFederalTax = llcFederalTax - deferredGains;
    const bbdStateTax = llcStateTax;
    const bbdEstateTax = flpEstateTax; // Use discounted estate value
    const bbdTotalTax = bbdFederalTax + bbdStateTax + bbdEstateTax + borrowingCost;

    const bbd: TaxScenario = {
      name: 'Buy-Borrow-Die Strategy',
      federalTax: bbdFederalTax,
      stateTax: bbdStateTax,
      estateTax: bbdEstateTax,
      totalTax: bbdTotalTax,
      savings: baselineTotalTax - bbdTotalTax,
      strategies: [
        'Tax-free liquidity through borrowing',
        'Capital gains deferral',
        'Step-up basis potential',
        `Interest cost: $${borrowingCost.toLocaleString()}/year`
      ]
    };

    setScenarios([baseline, llc, flp, bbd]);
  };

  return (
    <div className="space-y-8">
      <div className="grid gap-6">
        {/* Income & Expenses Section */}
        <section className={`space-y-4 ${activeSection !== 'income' && 'opacity-60'}`}>
          <h3 
            className="text-lg font-semibold cursor-pointer hover:text-emerald-600"
            onClick={() => setActiveSection('income')}
          >
            Income & Expenses
          </h3>
          {activeSection === 'income' && (
            <div className="grid gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Annual Income ($)</label>
                <Input
                  type="number"
                  value={formInputs.annualIncome}
                  onChange={(e) => handleInputChange('annualIncome', Number(e.target.value))}
                  className="w-full"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Annual Deductible Expenses ($)</label>
                <Input
                  type="number"
                  value={formInputs.deductibleExpenses}
                  onChange={(e) => handleInputChange('deductibleExpenses', Number(e.target.value))}
                  className="w-full"
                />
              </div>
            </div>
          )}
        </section>

        {/* Assets & Entity Section */}
        <section className={`space-y-4 ${activeSection !== 'assets' && 'opacity-60'}`}>
          <h3 
            className="text-lg font-semibold cursor-pointer hover:text-emerald-600"
            onClick={() => setActiveSection('assets')}
          >
            Assets & Entity Structure
          </h3>
          {activeSection === 'assets' && (
            <div className="grid gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">Asset Types</label>
                <div className="flex gap-3">
                  {['real_estate', 'stocks', 'business'].map((type) => (
                    <label key={type} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={formInputs.assetTypes.includes(type as any)}
                        onChange={() => handleAssetTypeToggle(type as any)}
                        className="rounded border-gray-300 text-emerald-600 focus:ring-emerald-500"
                      />
                      <span className="text-sm">{type.replace('_', ' ').toUpperCase()}</span>
                    </label>
                  ))}
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Current Entity Structure</label>
                <select
                  value={formInputs.currentEntity}
                  onChange={(e) => handleInputChange('currentEntity', e.target.value)}
                  className="w-full rounded-md border border-gray-300 px-3 py-2"
                >
                  <option value="none">None</option>
                  <option value="llc">LLC</option>
                  <option value="trust">Trust</option>
                  <option value="flp">Family Limited Partnership</option>
                </select>
              </div>
            </div>
          )}
        </section>

        {/* Estate Planning Section */}
        <section className={`space-y-4 ${activeSection !== 'estate' && 'opacity-60'}`}>
          <h3 
            className="text-lg font-semibold cursor-pointer hover:text-emerald-600"
            onClick={() => setActiveSection('estate')}
          >
            Estate Planning
          </h3>
          {activeSection === 'estate' && (
            <div className="grid gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Estate Value ($)</label>
                <Input
                  type="number"
                  value={formInputs.estateValue}
                  onChange={(e) => handleInputChange('estateValue', Number(e.target.value))}
                  className="w-full"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Planned Gifts/Transfers ($)</label>
                <Input
                  type="number"
                  value={formInputs.plannedGifts}
                  onChange={(e) => handleInputChange('plannedGifts', Number(e.target.value))}
                  className="w-full"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Number of Heirs</label>
                <Input
                  type="number"
                  value={formInputs.numHeirs}
                  onChange={(e) => handleInputChange('numHeirs', Number(e.target.value))}
                  className="w-full"
                />
              </div>
            </div>
          )}
        </section>

        {/* Strategy Section */}
        <section className={`space-y-4 ${activeSection !== 'strategy' && 'opacity-60'}`}>
          <h3 
            className="text-lg font-semibold cursor-pointer hover:text-emerald-600"
            onClick={() => setActiveSection('strategy')}
          >
            Investment Strategy
          </h3>
          {activeSection === 'strategy' && (
            <div className="grid gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Investment Approach</label>
                <select
                  value={formInputs.investmentStrategy}
                  onChange={(e) => handleInputChange('investmentStrategy', e.target.value)}
                  className="w-full rounded-md border border-gray-300 px-3 py-2"
                >
                  <option value="long_term">Long-term Holdings</option>
                  <option value="qsbs">QSBS Eligible</option>
                  <option value="other">Other</option>
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Borrowing Amount ($)</label>
                <Input
                  type="number"
                  value={formInputs.borrowingAmount}
                  onChange={(e) => handleInputChange('borrowingAmount', Number(e.target.value))}
                  className="w-full"
                />
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Borrowing Rate (%)</label>
                <Input
                  type="number"
                  value={formInputs.borrowingRate}
                  onChange={(e) => handleInputChange('borrowingRate', Number(e.target.value))}
                  className="w-full"
                />
              </div>
            </div>
          )}
        </section>

        <Button 
          onClick={calculateScenarios}
          className="mt-6 w-full bg-emerald-600 hover:bg-emerald-700 text-white"
        >
          Calculate Tax Scenarios
        </Button>
      </div>

      {/* Results Section */}
      {scenarios.length > 0 && (
        <div className="mt-8">
          <h3 className="text-xl font-semibold mb-4">Tax Optimization Scenarios</h3>
          <div className="grid gap-6 md:grid-cols-2">
            {scenarios.map((scenario, index) => (
              <div key={index} className="border rounded-lg p-4 shadow">
                <h4 className="text-lg font-medium mb-2">{scenario.name}</h4>
                <dl className="space-y-1">
                  <div className="flex justify-between">
                    <dt>Federal Tax:</dt>
                    <dd>${scenario.federalTax.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt>State Tax:</dt>
                    <dd>${scenario.stateTax.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt>Estate Tax:</dt>
                    <dd>${scenario.estateTax.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between font-semibold">
                    <dt>Total Tax:</dt>
                    <dd>${scenario.totalTax.toLocaleString()}</dd>
                  </div>
                  {scenario.savings > 0 && (
                    <div className="flex justify-between text-emerald-600 font-semibold">
                      <dt>Potential Savings:</dt>
                      <dd>${scenario.savings.toLocaleString()}</dd>
                    </div>
                  )}
                </dl>
                <div className="mt-4">
                  <h5 className="text-sm font-medium mb-2">Recommended Strategies:</h5>
                  <ul className="text-sm list-disc list-inside space-y-1">
                    {scenario.strategies.map((strategy, i) => (
                      <li key={i}>{strategy}</li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-6 text-sm text-gray-500">
            <p className="mb-2">
              These calculations are based on projected 2025 tax rates including TCJA sunset changes.
              All scenarios assume married filing jointly status and California residency.
            </p>
            <p>
              DISCLAIMER: These calculations are estimates based on simplified assumptions and current tax laws.
              Actual results may vary significantly. Please consult with qualified tax and legal professionals
              before implementing any tax planning strategies.
            </p>
          </div>
        </div>
      )}
    </div>
  );
}

interface AssetBase {
  value: number;
  type: 'real_estate' | 'stocks' | 'business' | 'other';
}

interface EntityStructure {
  type: 'none' | 'llc' | 'trust' | 'flp';
  expenses?: number;
}

interface TaxEfficiencyInputs {
  filingStatus: FilingStatus;
  assets: AssetBase[];
  currentEntities: EntityStructure[];
  stateResidence: string;
  plannedGifts: {
    amount: number;
    recipients: number;
  };
  investmentStrategy: 'long_term' | 'qsbs' | 'mixed';
  annualExpenses: {
    fees: number;
    donations: number;
    other: number;
  };
  debtPlans: {
    existingDebt: number;
    plannedBorrowing: number;
    collateralType: 'securities' | 'real_estate' | 'mixed';
  };
  estateSize: number;
}

interface TaxScenario {
  name: string;
  federalTax: number;
  stateTax: number;
  estateTax: number;
  totalTax: number;
  savings: number;
  strategies: string[];
}

const STATE_TAX_RATES: Record<string, number> = {
  CA: 0.133,
  NY: 0.109,
  TX: 0,
  FL: 0,
  WY: 0,
  // Add more states
};

const FEDERAL_BRACKETS_2025 = [
  { threshold: 0, rate: 0.10 },
  { threshold: 11600, rate: 0.12 },
  { threshold: 47150, rate: 0.22 },
  { threshold: 100525, rate: 0.24 },
  { threshold: 191950, rate: 0.32 },
  { threshold: 243725, rate: 0.35 },
  { threshold: 609350, rate: 0.37 }
];

interface FormInputs {
  annualIncome: number;
  deductibleExpenses: number;
  assetTypes: ('real_estate' | 'stocks' | 'business')[];
  currentEntity: 'none' | 'llc' | 'trust' | 'flp';
  plannedGifts: number;
  investmentStrategy: 'long_term' | 'qsbs' | 'other';
  borrowingAmount: number;
  numHeirs: number;
  borrowingRate: number;
  estateValue: number;
}

export default function TaxEfficiencyCalculator() {
  const [activeSection, setActiveSection] = useState<string>('income');
  const [formInputs, setFormInputs] = useState<FormInputs>({
    annualIncome: 500000,
    deductibleExpenses: 50000,
    assetTypes: [],
    currentEntity: 'none',
    plannedGifts: 0,
    investmentStrategy: 'long_term',
    borrowingAmount: 0,
    numHeirs: 2,
    borrowingRate: 5,
    estateValue: 0
  });

  const [scenarios, setScenarios] = useState<TaxScenario[]>([]);

  // Calculate baseline scenario (no structuring)
  const calculateBaselineTax = () => {
    const totalIncome = inputs.assets.reduce((sum, asset) => {
      // Simplified income calculation
      const incomeRate = asset.type === 'business' ? 0.25 : 0.04;
      return sum + (asset.value * incomeRate);
    }, 0);

    const federalTax = calculateFederalTax(totalIncome);
    const stateTax = totalIncome * (STATE_TAX_RATES[inputs.stateResidence] || 0);
    const estateTax = calculateEstateTax(inputs.estateSize);

    return {
      name: 'Baseline',
      federalTax,
      stateTax,
      estateTax,
      totalTax: federalTax + stateTax + estateTax,
      savings: 0,
      strategies: ['Current structure without optimization']
    };
  };

  // Calculate LLC scenario
  const calculateLLCScenario = () => {
    const totalExpenses = inputs.annualExpenses.fees + 
                         inputs.annualExpenses.donations + 
                         inputs.annualExpenses.other;
    const netIncome = inputs.assets.reduce((sum, asset) => {
      const incomeRate = asset.type === 'business' ? 0.25 : 0.04;
      return sum + (asset.value * incomeRate);
    }, 0) - totalExpenses;

    const federalTax = calculateFederalTax(netIncome);
    const stateTax = netIncome * (STATE_TAX_RATES[inputs.stateResidence] || 0);
    const estateTax = calculateEstateTax(inputs.estateSize);

    const baselineTax = calculateBaselineTax();
    const savings = baselineTax.totalTax - (federalTax + stateTax + estateTax);

    return {
      name: 'LLC Structure',
      federalTax,
      stateTax,
      estateTax,
      totalTax: federalTax + stateTax + estateTax,
      savings,
      strategies: [
        'Expense deductions through LLC',
        'Business asset protection',
        'Pass-through taxation benefits'
      ]
    };
  };

  // Calculate FLP/Trust scenario
  const calculateFLPTrustScenario = () => {
    const discountedEstateValue = inputs.estateSize * 0.7; // 30% valuation discount
    const estateTax = calculateEstateTax(discountedEstateValue);
    
    const baselineTax = calculateBaselineTax();
    const savings = baselineTax.estateTax - estateTax;

    return {
      name: 'FLP/Trust Structure',
      federalTax: baselineTax.federalTax,
      stateTax: baselineTax.stateTax,
      estateTax,
      totalTax: baselineTax.federalTax + baselineTax.stateTax + estateTax,
      savings,
      strategies: [
        '30% valuation discount for estate tax',
        'Asset protection benefits',
        'Streamlined wealth transfer'
      ]
    };
  };

  // Calculate Buy-Borrow-Die scenario
  const calculateBBDScenario = () => {
    const borrowingRate = 0.05;
    const borrowingCost = inputs.debtPlans.plannedBorrowing * borrowingRate;
    const deferredGains = inputs.debtPlans.plannedBorrowing * 0.20; // Assumed capital gains rate

    const baselineTax = calculateBaselineTax();
    const savings = deferredGains - borrowingCost;

    return {
      name: 'Buy-Borrow-Die Strategy',
      federalTax: baselineTax.federalTax - deferredGains,
      stateTax: baselineTax.stateTax,
      estateTax: baselineTax.estateTax,
      totalTax: baselineTax.totalTax - deferredGains + borrowingCost,
      savings,
      strategies: [
        'Tax-free liquidity through borrowing',
        'Capital gains deferral',
        'Step-up basis potential'
      ]
    };
  };

  // Helper function to calculate federal tax
  const calculateFederalTax = (income: number) => {
    let tax = 0;
    let remainingIncome = income;

    for (let i = 0; i < FEDERAL_BRACKETS_2025.length; i++) {
      const bracket = FEDERAL_BRACKETS_2025[i];
      const nextBracket = FEDERAL_BRACKETS_2025[i + 1];
      
      const taxableInThisBracket = nextBracket 
        ? Math.min(remainingIncome, nextBracket.threshold - bracket.threshold)
        : remainingIncome;

      if (taxableInThisBracket <= 0) break;

      tax += taxableInThisBracket * bracket.rate;
      remainingIncome -= taxableInThisBracket;
    }

    return tax;
  };

  // Helper function to calculate estate tax
  const calculateEstateTax = (estateValue: number) => {
    const exemption = 15000000; // $15M exemption post-OBBBA 2025
    const taxableEstate = Math.max(0, estateValue - exemption);
    return taxableEstate * 0.40; // 40% estate tax rate
  };

  // Calculate all scenarios
  const calculateScenarios = () => {
    const newScenarios = [
      calculateBaselineTax(),
      calculateLLCScenario(),
      calculateFLPTrustScenario(),
      calculateBBDScenario()
    ];
    setScenarios(newScenarios);
  };

  return (
    <div className="space-y-8 p-6">
      <h2 className="text-2xl font-semibold">Tax Efficiency Calculator</h2>
      
      {/* Input Form */}
      <form className="space-y-6" onSubmit={(e) => {
        e.preventDefault();
        calculateScenarios();
      }}>
        {/* Filing Status */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Filing Status</label>
          <select
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            value={inputs.filingStatus}
            onChange={(e) => setInputs({
              ...inputs,
              filingStatus: e.target.value as FilingStatus
            })}
          >
            <option value="single">Single</option>
            <option value="married_joint">Married Filing Jointly</option>
            <option value="married_separate">Married Filing Separately</option>
            <option value="head">Head of Household</option>
          </select>
        </div>

        {/* State Residence */}
        <div>
          <label className="block text-sm font-medium text-gray-700">State of Residence</label>
          <select
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            value={inputs.stateResidence}
            onChange={(e) => setInputs({
              ...inputs,
              stateResidence: e.target.value
            })}
          >
            {Object.keys(STATE_TAX_RATES).map(state => (
              <option key={state} value={state}>{state}</option>
            ))}
          </select>
        </div>

        {/* Estate Size */}
        <div>
          <label className="block text-sm font-medium text-gray-700">Total Estate Value</label>
          <input
            type="number"
            className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            value={inputs.estateSize}
            onChange={(e) => setInputs({
              ...inputs,
              estateSize: Number(e.target.value)
            })}
          />
        </div>

        <button
          type="submit"
          className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        >
          Calculate Scenarios
        </button>
      </form>

      {/* Results Display */}
      {scenarios.length > 0 && (
        <div className="mt-8">
          <h3 className="text-xl font-semibold mb-4">Tax Optimization Scenarios</h3>
          <div className="grid gap-6 md:grid-cols-2">
            {scenarios.map((scenario, index) => (
              <div key={index} className="border rounded-lg p-4 shadow">
                <h4 className="text-lg font-medium mb-2">{scenario.name}</h4>
                <dl className="space-y-1">
                  <div className="flex justify-between">
                    <dt>Federal Tax:</dt>
                    <dd>${scenario.federalTax.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt>State Tax:</dt>
                    <dd>${scenario.stateTax.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between">
                    <dt>Estate Tax:</dt>
                    <dd>${scenario.estateTax.toLocaleString()}</dd>
                  </div>
                  <div className="flex justify-between font-semibold">
                    <dt>Total Tax:</dt>
                    <dd>${scenario.totalTax.toLocaleString()}</dd>
                  </div>
                  {scenario.savings > 0 && (
                    <div className="flex justify-between text-green-600 font-semibold">
                      <dt>Potential Savings:</dt>
                      <dd>${scenario.savings.toLocaleString()}</dd>
                    </div>
                  )}
                </dl>
                <div className="mt-4">
                  <h5 className="text-sm font-medium mb-2">Recommended Strategies:</h5>
                  <ul className="text-sm list-disc list-inside space-y-1">
                    {scenario.strategies.map((strategy, i) => (
                      <li key={i}>{strategy}</li>
                    ))}
                  </ul>
                </div>
              </div>
            ))}
          </div>
          <div className="mt-6 text-sm text-gray-500">
            <p>Disclaimer: These calculations are estimates based on current tax laws and simplified assumptions. 
            Actual results may vary. Please consult with qualified tax and legal professionals before implementing any strategies.</p>
          </div>
        </div>
      )}
    </div>
  );
}